---
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import BodyProperties from "./BodyProperties.astro";
import MoonCard from "./MoonCard.astro";

type Props = {
    celestialBody: CollectionEntry<"celestial-bodies">,
    moons: CollectionEntry<"celestial-bodies">[]
}

const { celestialBody, moons } = Astro.props;

const { slug, data } = celestialBody;

const { name, images } = data;

let moonsSorted;

if (moons.length > 0) {
    moonsSorted = moons.sort((a, b) => a.data.order - b.data.order );
}

const { Content } = await render(celestialBody);

---

<article class="bg-gray-800 text-white rounded-md mx-4 md:mx-8 my-8 px-3 md:px-6 py-5" id={slug}>
    <div class="flex flex-col md:flex-row justify-center mb-4">
        <section class="content">
            <h2 class="text-3xl font-bold text-amber-400 text-center">{name}</h2>
            <Content />
        </section>
        <section class="images-properties">
            {
                images && (
                    <div class="images">
                    {
                        images.map((image : {url : string, description: string}) => (
                            <figure>
                                <img src={`solar-system/images/${image.url}`} alt={`Imagen de ${name}`}/>
                                <figcaption>{image.description}</figcaption>
                            </figure>
                        ))
                    }
                    </div>
                )
            }
            <BodyProperties properties={data}/>
        </section>
    </div>
    {
        moonsSorted && (
            <section class="p-2">
                <h3 class="text-xl">Lunas:</h3>
                    {
                        moonsSorted.map((moon) => {
                            return (
                                <MoonCard moon={moon}/>
                            )
                        })
                    }
            </section>
        )
    }
</article>